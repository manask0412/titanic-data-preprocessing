import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler, StandardScaler

# 1.1 Load the CSV
df = pd.read_csv("titanic-dataset.csv")

# 1.2 Peek at the first few rows
print(df.head())

# 1.3 Check dataframe shape and column info
print(f"\nShape: {df.shape}\n")
print(df.info())

# 1.4 Display summary statistics for numerical columns
print(df.describe())

# 1.5 Check for null values and data types
print("\nNull values per column:")
print(df.isnull().sum())

print("\nData types:")
print(df.dtypes)

# 2.1 Check null percentages (for decision-making)
null_percent = df.isnull().mean() * 100
print(null_percent.sort_values(ascending=False))

# 2.2 Impute 'Age' with median
age_median = df['Age'].median()
df['Age'] = df['Age'].fillna(age_median)

# 2.3 Impute 'Embarked' with mode
embarked_mode = df['Embarked'].mode()[0]
df['Embarked'] = df['Embarked'].fillna(embarked_mode)

# 2.4 Drop 'Cabin' column (too many missing values)
df.drop(columns=['Cabin'], inplace=True)

# 2.5 Confirm no more nulls
print("\nNulls after imputation/dropping:")
print(df.isnull().sum())

# 3.1 Convert 'Sex' to numeric using map (binary)
df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})

# 3.2 One-Hot Encode 'Embarked'
df = pd.get_dummies(df, columns=['Embarked'], prefix='Emb', drop_first=True)

# 3.3 Verify new columns
print(df.head())

# 4.1 Create scaler objects
minmax_scaler = MinMaxScaler()
std_scaler = StandardScaler()

# 4.2 Select numerical columns to scale
num_cols = ['Age', 'Fare', 'SibSp', 'Parch']

# 4.3 Example: Min-Max scaling
df_minmax = df.copy()
df_minmax[num_cols] = minmax_scaler.fit_transform(df_minmax[num_cols])

# 4.4 Example: Standardization
df_std = df.copy()
df_std[num_cols] = std_scaler.fit_transform(df_std[num_cols])

# 4.5 Show scaled statistics
print("\nAfter Min-Max scaling:")
print(df_minmax[num_cols].describe())

print("\nAfter Standardization:")
print(df_std[num_cols].describe())

# 5.1 Boxplots before removal
plt.figure(figsize=(12, 6))
for i, col in enumerate(num_cols, 1):
    plt.subplot(1, 4, i)
    sns.boxplot(data=df, x=col)
    plt.title(f"Boxplot of {col}")
plt.tight_layout()
plt.show()

# 5.2 Remove outliers based on IQR for each numerical column
df_no_outliers = df.copy()
iqr_cols = ['Age', 'Fare']
for col in iqr_cols:
    Q1 = df_no_outliers[col].quantile(0.25)
    Q3 = df_no_outliers[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    # Keep only rows within the bounds
    df_no_outliers = df_no_outliers[(df_no_outliers[col] >= lower_bound) & (df_no_outliers[col] <= upper_bound)]

print(f"Original shape: {df.shape} â†’ After outlier removal: {df_no_outliers.shape}")

# 5.3 Boxplots after removal
plt.figure(figsize=(12, 6))
for i, col in enumerate(num_cols, 1):
    plt.subplot(1, 4, i)
    sns.boxplot(data=df_no_outliers, x=col)
    plt.title(f"Cleaned Boxplot of {col}")
plt.tight_layout()
plt.show()